/**
 */
package xPPU.InterfaceRepository.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import xPPU.InterfaceRepository.util.InterfaceRepositoryAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class InterfaceRepositoryItemProviderAdapterFactory extends InterfaceRepositoryAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public InterfaceRepositoryItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.InterfaceRepository.InterfaceRepository} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterfaceRepositoryItemProvider interfaceRepositoryItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.InterfaceRepository.InterfaceRepository}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterfaceRepositoryAdapter() {
		if (interfaceRepositoryItemProvider == null) {
			interfaceRepositoryItemProvider = new InterfaceRepositoryItemProvider(this);
		}

		return interfaceRepositoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.InterfaceRepository.ScrewingSplitter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScrewingSplitterItemProvider screwingSplitterItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.InterfaceRepository.ScrewingSplitter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScrewingSplitterAdapter() {
		if (screwingSplitterItemProvider == null) {
			screwingSplitterItemProvider = new ScrewingSplitterItemProvider(this);
		}

		return screwingSplitterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.InterfaceRepository.ScrewingMotor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScrewingMotorItemProvider screwingMotorItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.InterfaceRepository.ScrewingMotor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScrewingMotorAdapter() {
		if (screwingMotorItemProvider == null) {
			screwingMotorItemProvider = new ScrewingMotorItemProvider(this);
		}

		return screwingMotorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.InterfaceRepository.ScrewingRack} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScrewingRackItemProvider screwingRackItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.InterfaceRepository.ScrewingRack}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScrewingRackAdapter() {
		if (screwingRackItemProvider == null) {
			screwingRackItemProvider = new ScrewingRackItemProvider(this);
		}

		return screwingRackItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.InterfaceRepository.ScrewingCylinder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScrewingCylinderItemProvider screwingCylinderItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.InterfaceRepository.ScrewingCylinder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScrewingCylinderAdapter() {
		if (screwingCylinderItemProvider == null) {
			screwingCylinderItemProvider = new ScrewingCylinderItemProvider(this);
		}

		return screwingCylinderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.InterfaceRepository.ScrewingFixture} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScrewingFixtureItemProvider screwingFixtureItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.InterfaceRepository.ScrewingFixture}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScrewingFixtureAdapter() {
		if (screwingFixtureItemProvider == null) {
			screwingFixtureItemProvider = new ScrewingFixtureItemProvider(this);
		}

		return screwingFixtureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.InterfaceRepository.ScrewingPotentiometer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScrewingPotentiometerItemProvider screwingPotentiometerItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.InterfaceRepository.ScrewingPotentiometer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScrewingPotentiometerAdapter() {
		if (screwingPotentiometerItemProvider == null) {
			screwingPotentiometerItemProvider = new ScrewingPotentiometerItemProvider(this);
		}

		return screwingPotentiometerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.InterfaceRepository.Suspension} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SuspensionItemProvider suspensionItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.InterfaceRepository.Suspension}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSuspensionAdapter() {
		if (suspensionItemProvider == null) {
			suspensionItemProvider = new SuspensionItemProvider(this);
		}

		return suspensionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.InterfaceRepository.SuspensionRack} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SuspensionRackItemProvider suspensionRackItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.InterfaceRepository.SuspensionRack}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSuspensionRackAdapter() {
		if (suspensionRackItemProvider == null) {
			suspensionRackItemProvider = new SuspensionRackItemProvider(this);
		}

		return suspensionRackItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.InterfaceRepository.SuspensionArm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SuspensionArmItemProvider suspensionArmItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.InterfaceRepository.SuspensionArm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSuspensionArmAdapter() {
		if (suspensionArmItemProvider == null) {
			suspensionArmItemProvider = new SuspensionArmItemProvider(this);
		}

		return suspensionArmItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.InterfaceRepository.Gearing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GearingItemProvider gearingItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.InterfaceRepository.Gearing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGearingAdapter() {
		if (gearingItemProvider == null) {
			gearingItemProvider = new GearingItemProvider(this);
		}

		return gearingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.InterfaceRepository.Clamping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClampingItemProvider clampingItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.InterfaceRepository.Clamping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClampingAdapter() {
		if (clampingItemProvider == null) {
			clampingItemProvider = new ClampingItemProvider(this);
		}

		return clampingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.InterfaceRepository.PneumaticSupply} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PneumaticSupplyItemProvider pneumaticSupplyItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.InterfaceRepository.PneumaticSupply}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPneumaticSupplyAdapter() {
		if (pneumaticSupplyItemProvider == null) {
			pneumaticSupplyItemProvider = new PneumaticSupplyItemProvider(this);
		}

		return pneumaticSupplyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.InterfaceRepository.SignalInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SignalInterfaceItemProvider signalInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.InterfaceRepository.SignalInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSignalInterfaceAdapter() {
		if (signalInterfaceItemProvider == null) {
			signalInterfaceItemProvider = new SignalInterfaceItemProvider(this);
		}

		return signalInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.InterfaceRepository.WaterSupply} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WaterSupplyItemProvider waterSupplyItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.InterfaceRepository.WaterSupply}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWaterSupplyAdapter() {
		if (waterSupplyItemProvider == null) {
			waterSupplyItemProvider = new WaterSupplyItemProvider(this);
		}

		return waterSupplyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.InterfaceRepository.PhysicalConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhysicalConnectionItemProvider physicalConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.InterfaceRepository.PhysicalConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhysicalConnectionAdapter() {
		if (physicalConnectionItemProvider == null) {
			physicalConnectionItemProvider = new PhysicalConnectionItemProvider(this);
		}

		return physicalConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.InterfaceRepository.TransportConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransportConnectionItemProvider transportConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.InterfaceRepository.TransportConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransportConnectionAdapter() {
		if (transportConnectionItemProvider == null) {
			transportConnectionItemProvider = new TransportConnectionItemProvider(this);
		}

		return transportConnectionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (interfaceRepositoryItemProvider != null) interfaceRepositoryItemProvider.dispose();
		if (screwingSplitterItemProvider != null) screwingSplitterItemProvider.dispose();
		if (screwingMotorItemProvider != null) screwingMotorItemProvider.dispose();
		if (screwingRackItemProvider != null) screwingRackItemProvider.dispose();
		if (screwingCylinderItemProvider != null) screwingCylinderItemProvider.dispose();
		if (screwingFixtureItemProvider != null) screwingFixtureItemProvider.dispose();
		if (screwingPotentiometerItemProvider != null) screwingPotentiometerItemProvider.dispose();
		if (suspensionItemProvider != null) suspensionItemProvider.dispose();
		if (suspensionRackItemProvider != null) suspensionRackItemProvider.dispose();
		if (suspensionArmItemProvider != null) suspensionArmItemProvider.dispose();
		if (gearingItemProvider != null) gearingItemProvider.dispose();
		if (clampingItemProvider != null) clampingItemProvider.dispose();
		if (pneumaticSupplyItemProvider != null) pneumaticSupplyItemProvider.dispose();
		if (signalInterfaceItemProvider != null) signalInterfaceItemProvider.dispose();
		if (waterSupplyItemProvider != null) waterSupplyItemProvider.dispose();
		if (physicalConnectionItemProvider != null) physicalConnectionItemProvider.dispose();
		if (transportConnectionItemProvider != null) transportConnectionItemProvider.dispose();
	}

}
