/**
 */
package iec611313Specification.common.types.provider;

import iec611313Specification.common.types.util.TypesAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TypesItemProviderAdapterFactory extends TypesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TypesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link iec611313Specification.common.types.TIME} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TIMEItemProvider timeItemProvider;

	/**
	 * This creates an adapter for a {@link iec611313Specification.common.types.TIME}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTIMEAdapter() {
		if (timeItemProvider == null) {
			timeItemProvider = new TIMEItemProvider(this);
		}

		return timeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iec611313Specification.common.types.REAL} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected REALItemProvider realItemProvider;

	/**
	 * This creates an adapter for a {@link iec611313Specification.common.types.REAL}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createREALAdapter() {
		if (realItemProvider == null) {
			realItemProvider = new REALItemProvider(this);
		}

		return realItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iec611313Specification.common.types.LREAL} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LREALItemProvider lrealItemProvider;

	/**
	 * This creates an adapter for a {@link iec611313Specification.common.types.LREAL}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLREALAdapter() {
		if (lrealItemProvider == null) {
			lrealItemProvider = new LREALItemProvider(this);
		}

		return lrealItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iec611313Specification.common.types.SINT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SINTItemProvider sintItemProvider;

	/**
	 * This creates an adapter for a {@link iec611313Specification.common.types.SINT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSINTAdapter() {
		if (sintItemProvider == null) {
			sintItemProvider = new SINTItemProvider(this);
		}

		return sintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iec611313Specification.common.types.INT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected INTItemProvider intItemProvider;

	/**
	 * This creates an adapter for a {@link iec611313Specification.common.types.INT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createINTAdapter() {
		if (intItemProvider == null) {
			intItemProvider = new INTItemProvider(this);
		}

		return intItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iec611313Specification.common.types.DINT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DINTItemProvider dintItemProvider;

	/**
	 * This creates an adapter for a {@link iec611313Specification.common.types.DINT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDINTAdapter() {
		if (dintItemProvider == null) {
			dintItemProvider = new DINTItemProvider(this);
		}

		return dintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iec611313Specification.common.types.LINT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LINTItemProvider lintItemProvider;

	/**
	 * This creates an adapter for a {@link iec611313Specification.common.types.LINT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLINTAdapter() {
		if (lintItemProvider == null) {
			lintItemProvider = new LINTItemProvider(this);
		}

		return lintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iec611313Specification.common.types.USINT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected USINTItemProvider usintItemProvider;

	/**
	 * This creates an adapter for a {@link iec611313Specification.common.types.USINT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUSINTAdapter() {
		if (usintItemProvider == null) {
			usintItemProvider = new USINTItemProvider(this);
		}

		return usintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iec611313Specification.common.types.UINT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UINTItemProvider uintItemProvider;

	/**
	 * This creates an adapter for a {@link iec611313Specification.common.types.UINT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUINTAdapter() {
		if (uintItemProvider == null) {
			uintItemProvider = new UINTItemProvider(this);
		}

		return uintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iec611313Specification.common.types.UDINT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UDINTItemProvider udintItemProvider;

	/**
	 * This creates an adapter for a {@link iec611313Specification.common.types.UDINT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUDINTAdapter() {
		if (udintItemProvider == null) {
			udintItemProvider = new UDINTItemProvider(this);
		}

		return udintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iec611313Specification.common.types.ULINT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ULINTItemProvider ulintItemProvider;

	/**
	 * This creates an adapter for a {@link iec611313Specification.common.types.ULINT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createULINTAdapter() {
		if (ulintItemProvider == null) {
			ulintItemProvider = new ULINTItemProvider(this);
		}

		return ulintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iec611313Specification.common.types.DATE} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DATEItemProvider dateItemProvider;

	/**
	 * This creates an adapter for a {@link iec611313Specification.common.types.DATE}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDATEAdapter() {
		if (dateItemProvider == null) {
			dateItemProvider = new DATEItemProvider(this);
		}

		return dateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iec611313Specification.common.types.DATE_AND_TIME} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DATE_AND_TIMEItemProvider datE_AND_TIMEItemProvider;

	/**
	 * This creates an adapter for a {@link iec611313Specification.common.types.DATE_AND_TIME}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDATE_AND_TIMEAdapter() {
		if (datE_AND_TIMEItemProvider == null) {
			datE_AND_TIMEItemProvider = new DATE_AND_TIMEItemProvider(this);
		}

		return datE_AND_TIMEItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iec611313Specification.common.types.TIME_OF_DAY} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TIME_OF_DAYItemProvider timE_OF_DAYItemProvider;

	/**
	 * This creates an adapter for a {@link iec611313Specification.common.types.TIME_OF_DAY}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTIME_OF_DAYAdapter() {
		if (timE_OF_DAYItemProvider == null) {
			timE_OF_DAYItemProvider = new TIME_OF_DAYItemProvider(this);
		}

		return timE_OF_DAYItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iec611313Specification.common.types.BOOL} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BOOLItemProvider boolItemProvider;

	/**
	 * This creates an adapter for a {@link iec611313Specification.common.types.BOOL}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBOOLAdapter() {
		if (boolItemProvider == null) {
			boolItemProvider = new BOOLItemProvider(this);
		}

		return boolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iec611313Specification.common.types.BYTE} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BYTEItemProvider byteItemProvider;

	/**
	 * This creates an adapter for a {@link iec611313Specification.common.types.BYTE}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBYTEAdapter() {
		if (byteItemProvider == null) {
			byteItemProvider = new BYTEItemProvider(this);
		}

		return byteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iec611313Specification.common.types.WORD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WORDItemProvider wordItemProvider;

	/**
	 * This creates an adapter for a {@link iec611313Specification.common.types.WORD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWORDAdapter() {
		if (wordItemProvider == null) {
			wordItemProvider = new WORDItemProvider(this);
		}

		return wordItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iec611313Specification.common.types.DWORD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DWORDItemProvider dwordItemProvider;

	/**
	 * This creates an adapter for a {@link iec611313Specification.common.types.DWORD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDWORDAdapter() {
		if (dwordItemProvider == null) {
			dwordItemProvider = new DWORDItemProvider(this);
		}

		return dwordItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iec611313Specification.common.types.LWORD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LWORDItemProvider lwordItemProvider;

	/**
	 * This creates an adapter for a {@link iec611313Specification.common.types.LWORD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLWORDAdapter() {
		if (lwordItemProvider == null) {
			lwordItemProvider = new LWORDItemProvider(this);
		}

		return lwordItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iec611313Specification.common.types.STRING} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected STRINGItemProvider stringItemProvider;

	/**
	 * This creates an adapter for a {@link iec611313Specification.common.types.STRING}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSTRINGAdapter() {
		if (stringItemProvider == null) {
			stringItemProvider = new STRINGItemProvider(this);
		}

		return stringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iec611313Specification.common.types.WSTRING} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WSTRINGItemProvider wstringItemProvider;

	/**
	 * This creates an adapter for a {@link iec611313Specification.common.types.WSTRING}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWSTRINGAdapter() {
		if (wstringItemProvider == null) {
			wstringItemProvider = new WSTRINGItemProvider(this);
		}

		return wstringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iec611313Specification.common.types.ENUMERATION} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ENUMERATIONItemProvider enumerationItemProvider;

	/**
	 * This creates an adapter for a {@link iec611313Specification.common.types.ENUMERATION}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createENUMERATIONAdapter() {
		if (enumerationItemProvider == null) {
			enumerationItemProvider = new ENUMERATIONItemProvider(this);
		}

		return enumerationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iec611313Specification.common.types.DERIVED} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DERIVEDItemProvider derivedItemProvider;

	/**
	 * This creates an adapter for a {@link iec611313Specification.common.types.DERIVED}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDERIVEDAdapter() {
		if (derivedItemProvider == null) {
			derivedItemProvider = new DERIVEDItemProvider(this);
		}

		return derivedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iec611313Specification.common.types.ARRAY} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ARRAYItemProvider arrayItemProvider;

	/**
	 * This creates an adapter for a {@link iec611313Specification.common.types.ARRAY}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createARRAYAdapter() {
		if (arrayItemProvider == null) {
			arrayItemProvider = new ARRAYItemProvider(this);
		}

		return arrayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iec611313Specification.common.types.STRUCTURE} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected STRUCTUREItemProvider structureItemProvider;

	/**
	 * This creates an adapter for a {@link iec611313Specification.common.types.STRUCTURE}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSTRUCTUREAdapter() {
		if (structureItemProvider == null) {
			structureItemProvider = new STRUCTUREItemProvider(this);
		}

		return structureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iec611313Specification.common.types.POINTER} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected POINTERItemProvider pointerItemProvider;

	/**
	 * This creates an adapter for a {@link iec611313Specification.common.types.POINTER}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPOINTERAdapter() {
		if (pointerItemProvider == null) {
			pointerItemProvider = new POINTERItemProvider(this);
		}

		return pointerItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (timeItemProvider != null) timeItemProvider.dispose();
		if (realItemProvider != null) realItemProvider.dispose();
		if (lrealItemProvider != null) lrealItemProvider.dispose();
		if (sintItemProvider != null) sintItemProvider.dispose();
		if (intItemProvider != null) intItemProvider.dispose();
		if (dintItemProvider != null) dintItemProvider.dispose();
		if (lintItemProvider != null) lintItemProvider.dispose();
		if (usintItemProvider != null) usintItemProvider.dispose();
		if (uintItemProvider != null) uintItemProvider.dispose();
		if (udintItemProvider != null) udintItemProvider.dispose();
		if (ulintItemProvider != null) ulintItemProvider.dispose();
		if (dateItemProvider != null) dateItemProvider.dispose();
		if (datE_AND_TIMEItemProvider != null) datE_AND_TIMEItemProvider.dispose();
		if (timE_OF_DAYItemProvider != null) timE_OF_DAYItemProvider.dispose();
		if (boolItemProvider != null) boolItemProvider.dispose();
		if (byteItemProvider != null) byteItemProvider.dispose();
		if (wordItemProvider != null) wordItemProvider.dispose();
		if (dwordItemProvider != null) dwordItemProvider.dispose();
		if (lwordItemProvider != null) lwordItemProvider.dispose();
		if (stringItemProvider != null) stringItemProvider.dispose();
		if (wstringItemProvider != null) wstringItemProvider.dispose();
		if (enumerationItemProvider != null) enumerationItemProvider.dispose();
		if (derivedItemProvider != null) derivedItemProvider.dispose();
		if (arrayItemProvider != null) arrayItemProvider.dispose();
		if (structureItemProvider != null) structureItemProvider.dispose();
		if (pointerItemProvider != null) pointerItemProvider.dispose();
	}

}
