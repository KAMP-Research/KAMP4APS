/**
 */
package xPPU.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import xPPU.util.XPPUAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class XPPUItemProviderAdapterFactory extends XPPUAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public XPPUItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.Plant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlantItemProvider plantItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.Plant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlantAdapter() {
		if (plantItemProvider == null) {
			plantItemProvider = new PlantItemProvider(this);
		}

		return plantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.Structure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StructureItemProvider structureItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.Structure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStructureAdapter() {
		if (structureItemProvider == null) {
			structureItemProvider = new StructureItemProvider(this);
		}

		return structureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.CommunicationNetwork} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommunicationNetworkItemProvider communicationNetworkItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.CommunicationNetwork}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommunicationNetworkAdapter() {
		if (communicationNetworkItemProvider == null) {
			communicationNetworkItemProvider = new CommunicationNetworkItemProvider(this);
		}

		return communicationNetworkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.PowerNetwork} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PowerNetworkItemProvider powerNetworkItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.PowerNetwork}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPowerNetworkAdapter() {
		if (powerNetworkItemProvider == null) {
			powerNetworkItemProvider = new PowerNetworkItemProvider(this);
		}

		return powerNetworkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.ControlCabinet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlCabinetItemProvider controlCabinetItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.ControlCabinet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlCabinetAdapter() {
		if (controlCabinetItemProvider == null) {
			controlCabinetItemProvider = new ControlCabinetItemProvider(this);
		}

		return controlCabinetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.PneumaticNetwork} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PneumaticNetworkItemProvider pneumaticNetworkItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.PneumaticNetwork}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPneumaticNetworkAdapter() {
		if (pneumaticNetworkItemProvider == null) {
			pneumaticNetworkItemProvider = new PneumaticNetworkItemProvider(this);
		}

		return pneumaticNetworkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.Conveyor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConveyorItemProvider conveyorItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.Conveyor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConveyorAdapter() {
		if (conveyorItemProvider == null) {
			conveyorItemProvider = new ConveyorItemProvider(this);
		}

		return conveyorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.Crane} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CraneItemProvider craneItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.Crane}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCraneAdapter() {
		if (craneItemProvider == null) {
			craneItemProvider = new CraneItemProvider(this);
		}

		return craneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.PowerWiring} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PowerWiringItemProvider powerWiringItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.PowerWiring}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPowerWiringAdapter() {
		if (powerWiringItemProvider == null) {
			powerWiringItemProvider = new PowerWiringItemProvider(this);
		}

		return powerWiringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.Modules} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModulesItemProvider modulesItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.Modules}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModulesAdapter() {
		if (modulesItemProvider == null) {
			modulesItemProvider = new ModulesItemProvider(this);
		}

		return modulesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.RampModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RampModuleItemProvider rampModuleItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.RampModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRampModuleAdapter() {
		if (rampModuleItemProvider == null) {
			rampModuleItemProvider = new RampModuleItemProvider(this);
		}

		return rampModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.PusherModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PusherModuleItemProvider pusherModuleItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.PusherModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPusherModuleAdapter() {
		if (pusherModuleItemProvider == null) {
			pusherModuleItemProvider = new PusherModuleItemProvider(this);
		}

		return pusherModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.MotorModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MotorModuleItemProvider motorModuleItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.MotorModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMotorModuleAdapter() {
		if (motorModuleItemProvider == null) {
			motorModuleItemProvider = new MotorModuleItemProvider(this);
		}

		return motorModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.SensorModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorModuleItemProvider sensorModuleItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.SensorModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorModuleAdapter() {
		if (sensorModuleItemProvider == null) {
			sensorModuleItemProvider = new SensorModuleItemProvider(this);
		}

		return sensorModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.Arm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArmItemProvider armItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.Arm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArmAdapter() {
		if (armItemProvider == null) {
			armItemProvider = new ArmItemProvider(this);
		}

		return armItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.TurningTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TurningTableItemProvider turningTableItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.TurningTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTurningTableAdapter() {
		if (turningTableItemProvider == null) {
			turningTableItemProvider = new TurningTableItemProvider(this);
		}

		return turningTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.VacuumGripper} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VacuumGripperItemProvider vacuumGripperItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.VacuumGripper}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVacuumGripperAdapter() {
		if (vacuumGripperItemProvider == null) {
			vacuumGripperItemProvider = new VacuumGripperItemProvider(this);
		}

		return vacuumGripperItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.ConveyorBelt} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConveyorBeltItemProvider conveyorBeltItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.ConveyorBelt}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConveyorBeltAdapter() {
		if (conveyorBeltItemProvider == null) {
			conveyorBeltItemProvider = new ConveyorBeltItemProvider(this);
		}

		return conveyorBeltItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.Pusher} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PusherItemProvider pusherItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.Pusher}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPusherAdapter() {
		if (pusherItemProvider == null) {
			pusherItemProvider = new PusherItemProvider(this);
		}

		return pusherItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.Components} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentsItemProvider componentsItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.Components}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentsAdapter() {
		if (componentsItemProvider == null) {
			componentsItemProvider = new ComponentsItemProvider(this);
		}

		return componentsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.SimpleMotor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleMotorItemProvider simpleMotorItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.SimpleMotor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleMotorAdapter() {
		if (simpleMotorItemProvider == null) {
			simpleMotorItemProvider = new SimpleMotorItemProvider(this);
		}

		return simpleMotorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.Rack} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RackItemProvider rackItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.Rack}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRackAdapter() {
		if (rackItemProvider == null) {
			rackItemProvider = new RackItemProvider(this);
		}

		return rackItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.Corner} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CornerItemProvider cornerItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.Corner}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCornerAdapter() {
		if (cornerItemProvider == null) {
			cornerItemProvider = new CornerItemProvider(this);
		}

		return cornerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.Tank} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TankItemProvider tankItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.Tank}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTankAdapter() {
		if (tankItemProvider == null) {
			tankItemProvider = new TankItemProvider(this);
		}

		return tankItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.Dispenser} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DispenserItemProvider dispenserItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.Dispenser}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDispenserAdapter() {
		if (dispenserItemProvider == null) {
			dispenserItemProvider = new DispenserItemProvider(this);
		}

		return dispenserItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.BottleSeperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BottleSeperatorItemProvider bottleSeperatorItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.BottleSeperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBottleSeperatorAdapter() {
		if (bottleSeperatorItemProvider == null) {
			bottleSeperatorItemProvider = new BottleSeperatorItemProvider(this);
		}

		return bottleSeperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.PowerSplitter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PowerSplitterItemProvider powerSplitterItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.PowerSplitter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPowerSplitterAdapter() {
		if (powerSplitterItemProvider == null) {
			powerSplitterItemProvider = new PowerSplitterItemProvider(this);
		}

		return powerSplitterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.WaterSplitter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WaterSplitterItemProvider waterSplitterItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.WaterSplitter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWaterSplitterAdapter() {
		if (waterSplitterItemProvider == null) {
			waterSplitterItemProvider = new WaterSplitterItemProvider(this);
		}

		return waterSplitterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.OperationPanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationPanelItemProvider operationPanelItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.OperationPanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationPanelAdapter() {
		if (operationPanelItemProvider == null) {
			operationPanelItemProvider = new OperationPanelItemProvider(this);
		}

		return operationPanelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.PowerSupply} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PowerSupplyItemProvider powerSupplyItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.PowerSupply}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPowerSupplyAdapter() {
		if (powerSupplyItemProvider == null) {
			powerSupplyItemProvider = new PowerSupplyItemProvider(this);
		}

		return powerSupplyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.Compressor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompressorItemProvider compressorItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.Compressor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompressorAdapter() {
		if (compressorItemProvider == null) {
			compressorItemProvider = new CompressorItemProvider(this);
		}

		return compressorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.Switch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SwitchItemProvider switchItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.Switch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSwitchAdapter() {
		if (switchItemProvider == null) {
			switchItemProvider = new SwitchItemProvider(this);
		}

		return switchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.PowerCable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PowerCableItemProvider powerCableItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.PowerCable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPowerCableAdapter() {
		if (powerCableItemProvider == null) {
			powerCableItemProvider = new PowerCableItemProvider(this);
		}

		return powerCableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.MonostableCylinder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MonostableCylinderItemProvider monostableCylinderItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.MonostableCylinder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMonostableCylinderAdapter() {
		if (monostableCylinderItemProvider == null) {
			monostableCylinderItemProvider = new MonostableCylinderItemProvider(this);
		}

		return monostableCylinderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.ProportionalCylinder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProportionalCylinderItemProvider proportionalCylinderItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.ProportionalCylinder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProportionalCylinderAdapter() {
		if (proportionalCylinderItemProvider == null) {
			proportionalCylinderItemProvider = new ProportionalCylinderItemProvider(this);
		}

		return proportionalCylinderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.BistableCylinder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BistableCylinderItemProvider bistableCylinderItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.BistableCylinder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBistableCylinderAdapter() {
		if (bistableCylinderItemProvider == null) {
			bistableCylinderItemProvider = new BistableCylinderItemProvider(this);
		}

		return bistableCylinderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.Controller} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControllerItemProvider controllerItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.Controller}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControllerAdapter() {
		if (controllerItemProvider == null) {
			controllerItemProvider = new ControllerItemProvider(this);
		}

		return controllerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.LED} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEDItemProvider ledItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.LED}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEDAdapter() {
		if (ledItemProvider == null) {
			ledItemProvider = new LEDItemProvider(this);
		}

		return ledItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.Button} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonItemProvider buttonItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.Button}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonAdapter() {
		if (buttonItemProvider == null) {
			buttonItemProvider = new ButtonItemProvider(this);
		}

		return buttonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.RegularRamp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegularRampItemProvider regularRampItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.RegularRamp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegularRampAdapter() {
		if (regularRampItemProvider == null) {
			regularRampItemProvider = new RegularRampItemProvider(this);
		}

		return regularRampItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.PneumaticPipe} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PneumaticPipeItemProvider pneumaticPipeItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.PneumaticPipe}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPneumaticPipeAdapter() {
		if (pneumaticPipeItemProvider == null) {
			pneumaticPipeItemProvider = new PneumaticPipeItemProvider(this);
		}

		return pneumaticPipeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.BusMaster} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusMasterItemProvider busMasterItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.BusMaster}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusMasterAdapter() {
		if (busMasterItemProvider == null) {
			busMasterItemProvider = new BusMasterItemProvider(this);
		}

		return busMasterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.BusSlave} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusSlaveItemProvider busSlaveItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.BusSlave}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusSlaveAdapter() {
		if (busSlaveItemProvider == null) {
			busSlaveItemProvider = new BusSlaveItemProvider(this);
		}

		return busSlaveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.BusCable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusCableItemProvider busCableItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.BusCable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusCableAdapter() {
		if (busCableItemProvider == null) {
			busCableItemProvider = new BusCableItemProvider(this);
		}

		return busCableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.BusBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusBoxItemProvider busBoxItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.BusBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusBoxAdapter() {
		if (busBoxItemProvider == null) {
			busBoxItemProvider = new BusBoxItemProvider(this);
		}

		return busBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.Interface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterfaceItemProvider interfaceItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.Interface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterfaceAdapter() {
		if (interfaceItemProvider == null) {
			interfaceItemProvider = new InterfaceItemProvider(this);
		}

		return interfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.Screwing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScrewingItemProvider screwingItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.Screwing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScrewingAdapter() {
		if (screwingItemProvider == null) {
			screwingItemProvider = new ScrewingItemProvider(this);
		}

		return screwingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.Suspension} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SuspensionItemProvider suspensionItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.Suspension}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSuspensionAdapter() {
		if (suspensionItemProvider == null) {
			suspensionItemProvider = new SuspensionItemProvider(this);
		}

		return suspensionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.Gearing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GearingItemProvider gearingItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.Gearing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGearingAdapter() {
		if (gearingItemProvider == null) {
			gearingItemProvider = new GearingItemProvider(this);
		}

		return gearingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.Clamping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClampingItemProvider clampingItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.Clamping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClampingAdapter() {
		if (clampingItemProvider == null) {
			clampingItemProvider = new ClampingItemProvider(this);
		}

		return clampingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.PneumaticSupply} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PneumaticSupplyItemProvider pneumaticSupplyItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.PneumaticSupply}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPneumaticSupplyAdapter() {
		if (pneumaticSupplyItemProvider == null) {
			pneumaticSupplyItemProvider = new PneumaticSupplyItemProvider(this);
		}

		return pneumaticSupplyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.SignalInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SignalInterfaceItemProvider signalInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.SignalInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSignalInterfaceAdapter() {
		if (signalInterfaceItemProvider == null) {
			signalInterfaceItemProvider = new SignalInterfaceItemProvider(this);
		}

		return signalInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.WaterSupply} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WaterSupplyItemProvider waterSupplyItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.WaterSupply}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWaterSupplyAdapter() {
		if (waterSupplyItemProvider == null) {
			waterSupplyItemProvider = new WaterSupplyItemProvider(this);
		}

		return waterSupplyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.PhysicalConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhysicalConnectionItemProvider physicalConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.PhysicalConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhysicalConnectionAdapter() {
		if (physicalConnectionItemProvider == null) {
			physicalConnectionItemProvider = new PhysicalConnectionItemProvider(this);
		}

		return physicalConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link xPPU.TransportConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransportConnectionItemProvider transportConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link xPPU.TransportConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransportConnectionAdapter() {
		if (transportConnectionItemProvider == null) {
			transportConnectionItemProvider = new TransportConnectionItemProvider(this);
		}

		return transportConnectionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

}
